name: Alpine Bump

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write

jobs:
  bump:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_branch: [ master, develop ]
    env:
      FILES: docker/Dockerfile docker/build-tools/resources.Dockerfile
      UA: "tuliprox-alpine-bot/1.0 (+https://github.com/${{ github.repository_owner }}/tuliprox)"
      PREBUILD_WORKFLOW_FILE: resources-prebuild.yml
    steps:
      - name: Checkout ${{ matrix.target_branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.target_branch }}
          fetch-depth: 0

      - name: Install jq & curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Resolve latest alpine:<version> (numeric tags only)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # Fetch all tags from Docker Hub (paginated) with retries and headers
          fetch_tags() {
            local url="https://registry.hub.docker.com/v2/repositories/library/alpine/tags?page_size=100"
            while [ -n "$url" ]; do
              local page
              page="$(curl -fsSL \
                -H "User-Agent: $UA" \
                -H "Accept: application/json" \
                --retry 3 --retry-delay 2 --retry-connrefused \
                "$url")"
              echo "$page" | jq -r '.results[].name'
              url="$(echo "$page" | jq -r '.next')"
              [ "$url" = "null" ] && url=""
            done
          }

          # Keep only pure numeric tags like "3.18", "3.19.1"; exclude edge/rc/beta/alpine variants with suffix
          latest_ver="$(
            fetch_tags \
            | grep -E '^[0-9]+(\.[0-9]+){1,2}$' \
            | sort -Vr \
            | head -n1 || true
          )"

          if [[ -z "${latest_ver:-}" ]]; then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Failed to determine latest alpine version" >&2
            exit 1
          fi

          echo "ok=true" >> "$GITHUB_OUTPUT"
          echo "latest=${latest_ver}" >> "$GITHUB_OUTPUT"

      - name: Read current ARG ALPINE_VERSION
        id: current
        shell: bash
        run: |
          set -euo pipefail
          current_values=""
          missing=()

          for f in $FILES; do
            if [[ -f "$f" ]]; then
              if grep -qE '^ARG[[:space:]]+ALPINE_VERSION=' "$f"; then
                val="$(grep -E '^ARG[[:space:]]+ALPINE_VERSION=' "$f" | head -n1 | cut -d= -f2)"
                echo "$f:$val"
                current_values+="$f=$val;"
              else
                missing+=("$f(no ARG)")
              fi
            else
              missing+=("$f(missing)")
            fi
          done

          echo "values=${current_values}" >> "$GITHUB_OUTPUT"
          if (( ${#missing[@]} )); then
            echo "missing_files=${missing[*]}" >> "$GITHUB_OUTPUT"
          else
            echo "missing_files=" >> "$GITHUB_OUTPUT"
          fi

      - name: Update files if needed
        id: update
        shell: bash
        run: |
          set -euo pipefail
          latest="${{ steps.resolve.outputs.latest }}"
          updated=false
          changed_files=0
          changed_list=""

          if [[ -z "$latest" ]]; then
            echo "updated=false" >> "$GITHUB_OUTPUT"
            echo "changed_files=0" >> "$GITHUB_OUTPUT"
            echo "changed_files_list=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          for f in $FILES; do
            [[ ! -f "$f" ]] && continue
            if grep -qE '^ARG[[:space:]]+ALPINE_VERSION=' "$f"; then
              if ! grep -qE "^ARG[[:space:]]+ALPINE_VERSION=${latest}$" "$f"; then
                sed -i -E "s|^ARG[[:space:]]+ALPINE_VERSION=.*$|ARG ALPINE_VERSION=${latest}|" "$f"
                changed_files=$((changed_files+1))
                changed_list="$changed_list $f"
                updated=true
              fi
            fi
          done

          echo "updated=$updated" >> "$GITHUB_OUTPUT"
          echo "changed_files=$changed_files" >> "$GITHUB_OUTPUT"
          echo "changed_files_list=${changed_list}" >> "$GITHUB_OUTPUT"

      - name: Commit & push changes
        if: steps.update.outputs.updated == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add $FILES
          git commit -m "chore(build-tools): bump ALPINE_VERSION to ${{ steps.resolve.outputs.latest }}"
          git push origin "HEAD:${{ matrix.target_branch }}"

      - name: Trigger resources prebuild (master only)
        id: trigger
        if: steps.update.outputs.updated == 'true' && matrix.target_branch == 'master'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          gh workflow run "${PREBUILD_WORKFLOW_FILE}" \
            -f alpine_ver="${{ steps.resolve.outputs.latest }}"
          echo "triggered=true" >> "$GITHUB_OUTPUT"

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## 🏔️ Alpine Bump — branch \`${{ matrix.target_branch }}\`"
            if [[ "${{ steps.resolve.outputs.ok }}" == "true" ]]; then
              echo "✅ Resolved latest alpine: **${{ steps.resolve.outputs.latest }}**"
            else
              echo "❌ Failed to resolve latest alpine version."
            fi
            echo ""
            echo "### 📄 Files"
            echo "- Targets: \`${{ env.FILES }}\`"
            if [[ -n "${{ steps.current.outputs.missing_files }}" ]]; then
              echo "⚠️ Missing \`ARG ALPINE_VERSION=\` or file absent: \`${{ steps.current.outputs.missing_files }}\`"
            fi
            echo ""
            echo "### 🔁 Change"
            if [[ "${{ steps.update.outputs.updated }}" == "true" ]]; then
              echo "⬆️ Updated \`ALPINE_VERSION\` ➜ **${{ steps.resolve.outputs.latest }}**"
              echo "🗂️ Changed files: \`${{ steps.update.outputs.changed_files_list }}\`"
              if [[ "${{ steps.trigger.outputs.triggered || '' }}" == "true" && "${{ matrix.target_branch }}" == "master" ]]; then
                echo "🚀 Triggered prebuild workflow: \`${{ env.PREBUILD_WORKFLOW_FILE }}\`"
              fi
            else
              if [[ "${{ steps.resolve.outputs.ok }}" == "true" ]]; then
                echo "↔️ No change needed (already up-to-date)."
              else
                echo "⏭️ Skipped due to resolve error."
              fi
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Fail when files are missing
        if: steps.current.outputs.missing_files != ''
        run: |
          echo "Required file(s) missing or ARG not found on branch '${{ matrix.target_branch }}'." >&2
          exit 1
