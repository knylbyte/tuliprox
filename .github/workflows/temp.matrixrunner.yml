name: Docker Build & Push

on:
  workflow_dispatch:
  push:
    branches: 
      - master
      - develop

env:
  IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            tag_suffix: linux-amd64
            rust_target: x86_64-unknown-linux-musl
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            tag_suffix: linux-arm64
            rust_target: aarch64-unknown-linux-musl
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
            rust_target: armv7-unknown-linux-musleabihf
            tag_suffix: linux-armv7
    
    runs-on: ${{ matrix.runner || 'ubuntu-24.04' }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Buildx (named)
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Schneller Rust-Setup + sccache (optional, falls du außerhalb Docker baust)
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }},wasm32-unknown-unknown

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Set sccache env
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        # sccache nutzt GHA Cache nativ
        # siehe: https://github.com/Mozilla-Actions/sccache-action

      # Cargo-Cache mit Ziel-Triples im Key
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust_target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust_target }}-

      # (Optional) Frontend-dist Cache – nur, wenn alle relevanten Dateien im Key sind
      - name: Cache frontend dist
        uses: actions/cache@v4
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/**','shared/**','frontend/Cargo.toml','frontend/Cargo.lock','frontend/Trunk.toml') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Build & Push (direkt, statt Shellscript)
      - name: Build & push app image (${{ matrix.platform }})
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            ${{ env.IMAGE }}:${{ matrix.tag_suffix }}
            ${{ env.IMAGE }}:${{ github.ref_name }}-${{ matrix.tag_suffix }}
          cache-from: type=gha,scope=${{ env.IMAGE }}-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ env.IMAGE }}-${{ github.ref_name }}
          build-args: |
            RUST_TARGET=${{ matrix.rust_target }}
            # ggf. Tools-Image über ARGs referenzieren

  manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifests (:latest + :branch)
        run: |
          IMAGE="${{ env.IMAGE }}"
          REF="${{ github.ref_name }}"
          docker buildx imagetools create \
            -t "${IMAGE}:latest" \
            -t "${IMAGE}:${REF}" \
            "${IMAGE}:linux-amd64" \
            "${IMAGE}:linux-arm64"
          docker buildx imagetools inspect "${IMAGE}:latest"
