---
name: Rust Distro Bump

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  bump:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_branch: [ master, develop ]
    env:
      FILES: docker/build-tools/rust-wasm-tools.Dockerfile  # will add more files later
      UA: "tuliprox-rust-distro-bot/1.0 (+https://github.com/${{ github.repository_owner }}/tuliprox)"
    steps:
      - name: Checkout ${{ matrix.target_branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.target_branch }}
          fetch-depth: 0

      - name: Install jq & curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Resolve latest rust:<semver>-<distro> (no prioritization)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # Fetch all tags from Docker Hub (paginated) with retries and headers
          fetch_tags() {
            local url="https://registry.hub.docker.com/v2/repositories/library/rust/tags?page_size=100"
            while [ -n "$url" ]; do
              local page
              page="$(curl -fsSL \
                -H "User-Agent: $UA" \
                -H "Accept: application/json" \
                --retry 3 --retry-delay 2 --retry-connrefused \
                "$url")"
              echo "$page" | jq -r '.results[].name'
              url="$(echo "$page" | jq -r '.next')"
              [ "$url" = "null" ] && url=""
            done
          }

          # Resolve rust:latest digest first
          latest_page="$(curl -fsSL \
            -H "User-Agent: $UA" \
            -H "Accept: application/json" \
            --retry 3 --retry-delay 2 --retry-connrefused \
            "https://registry.hub.docker.com/v2/repositories/library/rust/tags/latest")"
          latest_digest="$(echo "$latest_page" | jq -r '.digest')"
          if [[ -z "${latest_digest:-}" || "${latest_digest}" == "null" ]]; then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Failed to determine rust:latest digest" >&2
            exit 1
          fi

          # Build a full name<tab>digest list from all tag pages
          all_pairs="$(
            url="https://registry.hub.docker.com/v2/repositories/library/rust/tags?page_size=100"
            while [ -n "$url" ]; do
              page="$(curl -fsSL \
                -H "User-Agent: $UA" \
                -H "Accept: application/json" \
                --retry 3 --retry-delay 2 --retry-connrefused \
                "$url")"
              echo "$page" | jq -r '.results[] | [.name, .digest] | @tsv'
              url="$(echo "$page" | jq -r '.next')"
              [ "$url" = "null" ] && url=""
            done
          )"

          names_matching_digest="$(
            printf '%s\n' "$all_pairs" | awk -v d="$latest_digest" -F'\t' '$2==d {print $1}'
          )"

          # Keep only tags like "<semver>-<suffix>"; drop alpine/slim variants
          candidates="$(
            printf '%s\n' "$names_matching_digest" \
            | grep -E '^[0-9]+(\.[0-9]+){1,2}-[a-z0-9]+$' \
            | grep -Ev '(alpine|slim)'
          )"

          if [[ -z "${candidates:-}" ]]; then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Failed to list candidates" >&2
            exit 1
          fi

          # Choose the highest semver; if multiple tags share that semver,
          # pick deterministically by tag name (no manual prioritization).
          latest_line="$(
            printf '%s\n' "$candidates" \
            | awk -F- '{print $1 "|" $0}' \
            | sort -t"|" -k1,1Vr -k2,2 \
            | head -n1
          )"

          latest_tag="${latest_line#*|}"       # e.g. 1.81.0-trixie
          latest_semver="${latest_line%%|*}"    # e.g. 1.81.0
          latest_distro="${latest_tag#${latest_semver}-}" # e.g. trixie

          if [[ -z "${latest_tag:-}" ]]; then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Failed to determine latest semver tag" >&2
            exit 1
          fi

          # Optional: verify manifest (non-fatal)
          if ! docker buildx imagetools inspect "rust:${latest_tag}" >/dev/null 2>&1; then
            echo "⚠️ Could not inspect rust:${latest_tag} manifest (buildx not set up?)." >&2
          fi

          echo "ok=true" >> "$GITHUB_OUTPUT"
          echo "latest=${latest_tag}" >> "$GITHUB_OUTPUT"
          echo "latest_semver=${latest_semver}" >> "$GITHUB_OUTPUT"
          echo "latest_distro=${latest_distro}" >> "$GITHUB_OUTPUT"

      - name: Read current ARG RUST_DISTRO
        id: current
        shell: bash
        run: |
          set -euo pipefail
          current=""
          missing=()

          for f in $FILES; do
            if grep -qE '^ARG[[:space:]]+RUST_DISTRO=' "$f"; then
              val="$(grep -E '^ARG[[:space:]]+RUST_DISTRO=' "$f" | head -n1 | cut -d= -f2)"
              echo "$f:$val"
              current="$val"
            else
              missing+=("$f")
            fi
          done

          echo "value=${current}" >> "$GITHUB_OUTPUT"
          if (( ${#missing[@]} )); then
            echo "missing_files=${missing[*]}" >> "$GITHUB_OUTPUT"
          else
            echo "missing_files=" >> "$GITHUB_OUTPUT"
          fi

      - name: Update files if needed
        id: update
        shell: bash
        run: |
          set -euo pipefail
          latest="${{ steps.resolve.outputs.latest }}"
          curr="${{ steps.current.outputs.value }}"
          updated=false
          changed_files=0

          if [[ -z "$latest" ]]; then
            echo "updated=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          for f in $FILES; do
            if grep -qE '^ARG[[:space:]]+RUST_DISTRO=' "$f"; then
              if ! grep -qE "^ARG[[:space:]]+RUST_DISTRO=${latest}$" "$f"; then
                sed -i -E "s|^ARG[[:space:]]+RUST_DISTRO=.*$|ARG RUST_DISTRO=${latest}|" "$f"
                changed_files=$((changed_files+1))
                updated=true
              fi
            fi
          done

          echo "updated=$updated" >> "$GITHUB_OUTPUT"
          echo "changed_files=$changed_files" >> "$GITHUB_OUTPUT"

      - name: Commit & push changes
        if: steps.update.outputs.updated == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add $FILES
          git commit -m "chore(build-tools): bump RUST_DISTRO to ${{ steps.resolve.outputs.latest }}"
          git push origin "HEAD:${{ matrix.target_branch }}"

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## 🐳 Rust Distro Bump — branch \`${{ matrix.target_branch }}\`"
            if [[ "${{ steps.resolve.outputs.ok }}" == "true" ]]; then
              echo "✅ Resolved latest tag: \`rust:${{ steps.resolve.outputs.latest }}\`"
              echo "- Semver: **${{ steps.resolve.outputs.latest_semver }}**"
              echo "- Distro: **${{ steps.resolve.outputs.latest_distro }}**"
            else
              echo "❌ Failed to resolve a latest semver tag."
            fi
            echo ""
            echo "### 📄 Files"
            echo "- Target files: \`${{ env.FILES }}\`"
            if [[ -n "${{ steps.current.outputs.missing_files }}" ]]; then
              echo "⚠️ Missing \`ARG RUST_DISTRO=\` in: \`${{ steps.current.outputs.missing_files }}\`"
            fi
            echo ""
            echo "### 🔁 Change"
            if [[ "${{ steps.update.outputs.updated }}" == "true" ]]; then
              echo "⬆️ Updated \`ARG RUST_DISTRO\` ➜ **${{ steps.resolve.outputs.latest }}**"
            else
              if [[ "${{ steps.resolve.outputs.ok }}" == "true" ]]; then
                echo "↔️ No change needed (already up-to-date)."
              else
                echo "⏭️ Skipped due to resolve error."
              fi
            fi
          } >> "$GITHUB_STEP_SUMMARY"
