---
name: Bump Trunk & Wasm-Bindgen-CLI

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write
  actions: write

jobs:
  check-and-bump:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_branch: [ master, develop ]
    env:
      FILE: docker/build-tools/rust-wasm-tools.Dockerfile
      UA: "tuliprox-bump-bot/1.0 (+https://github.com/${{ github.repository_owner }}/tuliprox)"
      PREBUILD_WORKFLOW_FILE: rust-wasm-tools.yml
    steps:
      - name: Checkout ${{ matrix.target_branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.target_branch }}
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get current versions from Dockerfile
        id: current
        shell: bash
        run: |
          set -euo pipefail

          trunk_current="$(grep -Eo 'ARG TRUNK_VER=([0-9]+\.[0-9]+\.[0-9]+)' "$FILE" | cut -d= -f2)"
          bindgen_current="$(grep -Eo 'ARG BINDGEN_VER=([0-9]+\.[0-9]+\.[0-9]+)' "$FILE" | cut -d= -f2)"

          echo "trunk_current=$trunk_current" >> "$GITHUB_OUTPUT"
          echo "bindgen_current=$bindgen_current" >> "$GITHUB_OUTPUT"

      - name: Fetch latest versions
        id: latest
        shell: bash
        run: |
          set -euo pipefail
          # Query crates.io for the max stable versions
          get_latest_from_api () {
            local crate="$1"
            curl -fsSL \
              -H "User-Agent: $UA" \
              -H "Accept: application/json" \
              --retry 3 --retry-delay 2 --retry-connrefused \
              "https://crates.io/api/v1/crates/${crate}" \
            | jq -r '.crate.max_stable_version'
          }

          trunk_latest="$(get_latest_from_api trunk || true)"
          bindgen_latest="$(get_latest_from_api wasm-bindgen-cli || true)"

          # Basic sanity: ensure non-empty strings
          if [[ -z "${trunk_latest:-}" || "${trunk_latest}" == "null" ]]; then
            echo "Failed to resolve latest trunk version" >&2
            exit 1
          fi

          if [[ -z "${bindgen_latest:-}" || "${bindgen_latest}" == "null" ]]; then
            echo "Failed to resolve latest wasm-bindgen-cli version" >&2
            exit 1
          fi

          echo "trunk_latest=$trunk_latest" >> "$GITHUB_OUTPUT"
          echo "bindgen_latest=$bindgen_latest" >> "$GITHUB_OUTPUT"

      - name: Show versions
        run: |
          echo "Current -> trunk=${{ steps.current.outputs.trunk_current }}, wasm-bindgen-cli=${{ steps.current.outputs.bindgen_current }}"
          echo "Latest  -> trunk=${{ steps.latest.outputs.trunk_latest }}, wasm-bindgen-cli=${{ steps.latest.outputs.bindgen_latest }}"

      - name: Update Dockerfile if newer versions found
        id: update
        shell: bash
        run: |
          set -euo pipefail
          updated=false
          trunk_changed=false
          bindgen_changed=false

          if [ "${{ steps.latest.outputs.trunk_latest }}" != "${{ steps.current.outputs.trunk_current }}" ]; then
            sed -i -E "s/^(ARG TRUNK_VER=).*/\1${{ steps.latest.outputs.trunk_latest }}/" "$FILE"
            updated=true
            trunk_changed=true
          fi

          if [ "${{ steps.latest.outputs.bindgen_latest }}" != "${{ steps.current.outputs.bindgen_current }}" ]; then
            sed -i -E "s/^(ARG BINDGEN_VER=).*/\1${{ steps.latest.outputs.bindgen_latest }}/" "$FILE"
            updated=true
            bindgen_changed=true
          fi

          echo "updated=$updated" >> "$GITHUB_OUTPUT"
          echo "trunk_changed=$trunk_changed" >> "$GITHUB_OUTPUT"
          echo "bindgen_changed=$bindgen_changed" >> "$GITHUB_OUTPUT"

          if [ "$updated" = false ]; then
            echo "Nothing to update."
          fi

      - name: Commit & push (${{ matrix.target_branch }})
        if: steps.update.outputs.updated == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$FILE"
          git commit -m "chore(build-tools): bump trunk to ${{ steps.latest.outputs.trunk_latest }} and wasm-bindgen-cli to ${{ steps.latest.outputs.bindgen_latest }}"
          git push origin "HEAD:${{ matrix.target_branch }}"

      # Trigger tools prebuild only once (on master) to avoid duplicate runs
      - name: Trigger prebuild workflow (master only)
        id: trigger
        if: steps.update.outputs.updated == 'true' && matrix.target_branch == 'master'
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail

          # Trigger the prebuild workflow by filename and pass the new versions as inputs
          gh workflow run "${PREBUILD_WORKFLOW_FILE}" \
            -f trunk_ver="${{ steps.latest.outputs.trunk_latest }}" \
            -f bindgen_ver="${{ steps.latest.outputs.bindgen_latest }}"

          echo "triggered=true" >> "$GITHUB_OUTPUT"

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## 🦀 Rust tools bump — branch \`${{ matrix.target_branch }}\`"
            echo ""
            echo "### 📊 Versions"
            echo "- trunk: **${{ steps.current.outputs.trunk_current }} ➜ ${{ steps.latest.outputs.trunk_latest }}** $([[ \"${{ steps.update.outputs.trunk_changed }}\" == \"true\" ]] && echo '⬆️' || echo '↔️')"
            echo "- wasm-bindgen-cli: **${{ steps.current.outputs.bindgen_current }} ➜ ${{ steps.latest.outputs.bindgen_latest }}** $([[ \"${{ steps.update.outputs.bindgen_changed }}\" == \"true\" ]] && echo '⬆️' || echo '↔️')"
            echo ""
            if [[ "${{ steps.update.outputs.updated }}" == "true" ]]; then
              echo "✅ Dockerfile updated and committed."
              if [[ "${{ steps.trigger.outputs.triggered || '' }}" == "true" && "${{ matrix.target_branch }}" == "master" ]]; then
                echo "🚀 Prebuild workflow triggered."
              fi
            else
              echo "ℹ️ No update required."
            fi
          } >> "$GITHUB_STEP_SUMMARY"
